q()
name
x <- 5
x <- 5
name <- "Sean"
name
x <- 2
x <- 2,5,1,3
x <- c(2,5,1,3)
# With the people around you, create a vector "people" that stores each of your names
People <- c("Sean","Keagan","Iman")
# Create a vector "ages" with each of your ages
Ages <- c(20,20,20)
# Assign the value 100 to a variable x
x <- 100
# Assign the value 200 to a variable y
y <- 200
# Combine x and y into a vector z
z <- c(x,y)
z
People
Ages
puppies <- 2
puppies <- 2
?seq
nums <- seq(100,199,5)
nums
### Numeric / character variables ###
# Create a variable 'puppies' equal to the number of puppies you'd like to have
puppies <- 2
# Create a variable 'cost', which is how expensive you think a puppy is
cost <- 100
# Create a variable 'total_cost' that has the total cost of all of your puppies
total_cost <- puppies*cost
# Assign your (intended/potential) major to a variable 'major'
major <- Philosophy
# Use the paste command to create a  variable 'phrase'
# The 'phrase' variable should combine the string "My major is ", and the name of your major
phrase <- paste("My major is Philosophy")
### Vectors ###
# Create a vector 'classes', which is a list of all the classes you're currently taking
classes <- c("Info 498","Info450","Phil 401")
# Create a variable 'num_classes' by measuring the length of your 'classes' vector
num_classes <- length(classes)
# Create a variable 'favorite_class' by retrieving your favorite class out of the 'classes' vector
favorite_class <- classes[1]
# Create a variable 'hours_per_week' that has the number of hours you spend working on each class
hours_per_week <- c(2,5,3)
# Create a variable 'hard_week' in which you work 1.5x as long as a normal week
hard_week <- hours_per_week*1.5
# Use the seq command to create a vector 'nums' with numbers 100 through 199
nums <- seq(100,199,1)
# Create a variable 'first_ten' which has the first 10 values in your 'nums' variable
first_ten <- nums[1:10]
library stringr
library(stringr)
install.packages(stringr)
install.packages('stringr')
library(stringr)
library('stringr')
library(stringr)
library(stringr)
minutes_in_a_day <- 24 x 60
minutes_in_a_day <- 24 * 60
introduction <- function(name, age){
greeting <- "Hello, my name is Sean"
return greeting
}
introduction <- function(name, age){
greeting <- "Hello, my name is Sean"
return greeting
}
introduction <- function(name, age){
greeting <- print("Hello, my name is Sean")
return greeting
}
introduction <- function(name, age){
greeting <- print('Hello, my name is', name, 'and I am', age, 'years old.')
return greeting
}
introduction <- function(name, age){
greeting <- print('Hello, my name is', name, 'and I am', age, 'years old.', sep=(' '))
return greeting
}
introduction <- function(name, age){
greeting <- paste('Hello, my name is', name, 'and I am', age, 'years old.', sep=(' '))
return greeting
}
introduction <- function(name, age){
greeting <- paste('Hello, my name is', name, 'and I am', age, 'years old.', sep=(' '))
return(greeting)
}
introduction("Sean", 20)
myIntro <- introduction(myName, myAge)
library(stringr)
# Defining variables -------------------------------
# Create a numeric variable myAge that is equal to your age
myAge <- 20
# Create a variable myName that is equal to your first name
myName <- Sean
# Using multiplication, create a variable minutes_in_a_day that is equal to the number of minutes in a day
minutes_in_a_day <- 24 * 60
# Working with functions -------------------------------
# Write a function called introduction that takes in two arguments, name, and age. This function should return a string value that says "Hello, my name is {name}, and I'm {age} years old".
introduction <- function(name, age){
greeting <- paste('Hello, my name is', name, 'and I am', age, 'years old.', sep=(' '))
return(greeting)
}
# Create a variable myIntro by passing your variables myName and myAge into your introduction function
myIntro <- introduction(myName, myAge)
myName <- "Sean"
myIntro <- introduction(myName, myAge)
myintro
myIntro
casualIntro <- c(introduction(myName, myAge), gsub('Hello, my name is', Hey, I'm'))
casualIntro <- c(introduction(myName, myAge), gsub("Hello, my name is", "Hey, I'm"))
casualIntro <- c(introduction(myName, myAge), gsub("Hello, my name is", "Hey, I'm"))
introduction(myName, myAge)
casualIntro <- c(introduction(myName, myAge) gsub("Hello, my name is", "Hey, I'm"))
casualIntro <- c(introduction(myName, myAge), gsub(paste("Hello, my name is"), paste("Hey, I'm"))
casualIntro(myIntro)
casualIntro <- c(myIntro, gsub(paste("Hello, my name is"), paste("Hey, I'm"))
casualIntro
casualIntro <- gsub("Hello, my name is"), paste("Hey, I'm"), myIntro)
casualIntro <- gsub(("Hello, my name is"), paste("Hey, I'm"), myIntro)
loud_intro <- c(myIntro,toupper)
?toupper
loud_intro <- toupper(myIntro)
quiet_intro <- tolower(myIntro)
capitalized <- str_to_title(myIntro)
?str_to_title
?str_count
occurances <- str_count(myIntro, pattern = "e")
double <- function(x,y){
return x+y
}
double <- function(x,y){
return(x+y)
}
double <- function(x){
return(x*2)
}
doubl(3)
double(3)
twenty <- double(10)
third_power <- function(x){
return(x^3)
}
third_power(3)
twenty_seven <- third_power(3)
twenty_seven
movies <- c("A New Hope", "A Christmas Story", "Finding Nemo", "Aladdin", "Office Space", "Anchorman")
?:
?seq
top_three <- movies[1:3]
top_three
excited <- print(movies, "is a great movie!")
excited <- c(movies, "is a great movie!")
excited
excited <- c(movies + "is a great movie!")
excited <- print(movies[1:6], "is a great movie!")
without_four <- movies[1,2,3,5,6]
without_four <- movies[c(1,2,3,5,6)]
without_four
numbers <- 700:999
len <- length(numbers)
num_mean <- mean(numbers)
num_mean <- mean(numbers)
mean(numbers)
Breakfast <- c(coffee, eggs, bacon)
Breakfast <- c("coffee", "eggs", "bacon")
meals <- list(breakfast, lunch)
breakfast <- c("coffee", "eggs", "bacon")
lunch <- c("soda", "sandwich")
meals <- list(breakfast, lunch)
dinner <- c("cider", "pasta")
dinner <- c("cider", "pasta")
meals <- list(breakfast = breakfast, lunch = lunch)
meals
meals$dinner <- c("marinated beef", "#leftovers", "#reallygood", "rice")
meals
next_up <- meals[['dinner']]
diner
dinner
next_up
items <- lapply(meals, length)
items
add_pizza <- function(food){
return(c(food, 'pizza'))
}
elevations <- c(100, 5000, 2)
cities <- c('Seattle', 'Denver', 'New Orleans')
city_df <- data.frame(cities, elevations)
print(city_df)
data("USPersonalExpenditure")
is.data.frame USPersonalExpenditure
is.data.frame(USPersonalExpenditure)
data.frame(USPersonalExpenditure)
uspe <- data.frame(USPersonalExpenditure)
uspe
view(uspe)
View(uspe)
colnames(uspe)
rownames(uspe)
uspe$category <- rownames(uspe)
uspe
mh <- uspe[[Medical and Health]]
mh <- uspe[Medical and Health]
mh <- uspe[,Medical and Health]
mh <- uspe[Medical and Health,]
mh <- uspe['Medical and Health',]
mh
1955 <- uspe[,'X1955']
fiftyfive <- uspe[,'X1955']
fiftyfive
fiftyfive <- uspe[,'X1955', drop=FALSE]
fiftyfive
pc <- uspe['Personal Care', 'X1940']
pc <- uspe['Personal Care', 'X1940']
pc
ft <- uspe['Food and Tobacco', 'X1960']
ft
most_exp_1960 <- max(uspe[, "X1960"]
most_exp_1960
biggest_exp_1960 <- max(uspe[, "X1960"]
biggest_exp_1960
biggest_exp_1960 <- max(uspe[, "X1960"])
biggest_exp_1960
uspe
biggest_exp_1960 <- uspe$category[uspe$X1960 == max(uspe[X1960])
biggest_exp_1960
repo_url <- paste0(base_repo, 'access_token=', mytoken, '&per_page=100&sort=created&direction=desc')
mytoken <- '939506c8601b791a576f3754890efcf671d34c63'
user <- 'EchosOki?'
base <- 'https://api.github.com/users/'
org_url <- paste0(base, user, 'access_token=', mytoken)
user_info <- fromJSON(org_url)
#Querying data from GitHub / Repositories
base_repo <- 'https://api.github.com/users/EchosOki/repos?'
repo_url <- paste0(base_repo, 'access_token=', mytoken, '&per_page=100&sort=created&direction=desc')
repo_info <- fromJSON(repo_url)
library(jsonlite)
library(dplyr)
library(knitr)
library(curl)
library(jsonlite)
library(dplyr)
library(knitr)
library(curl)
mytoken <- '939506c8601b791a576f3754890efcf671d34c63'
user <- 'EchosOki?'
base <- 'https://api.github.com/users/'
org_url <- paste0(base, user, 'access_token=', mytoken)
user_info <- fromJSON(org_url)
base_repo <- 'https://api.github.com/users/EchosOki/repos?'
repo_url <- paste0(base_repo, 'access_token=', mytoken, '&per_page=100&sort=created&direction=desc')
repo_info <- fromJSON(repo_url)
repo_info
repo_url
View(repo_url)
View(repo_info)
flatten(repo_info)
repo_info <- fromJSON(repo_url)
ri_flat <- flatten(repo_info)
num_repos <- nrow(ri_flat)
user <- 'INFO-498F?'
org_url <- paste0(base, user, 'access_token=', mytoken)
user_info <- fromJSON(org_url)
View(user_info)
user_info$repos_url
base_repo <- 'https://api.github.com/users/INFO-498F/repos?'
repo_url <- paste0(base_repo, 'access_token=', mytoken, '&per_page=100&sort=created&direction=desc')
repo_info <- fromJSON(repo_url)
ri_flat <- flatten(repo_info)
num_repos <- nrow(ri_flat)
repo_url
pop_repo <- filter(ri_flat, forks_count == max(forks_count))
View(pop_repo)
select(name)
select(name)
pop_repo <- filter(ri_flat, forks_count == max(forks_count)) %>%
select(name)
pop_repo
remove(user)
base <- 'https://api.github.com/user/'
org_url <- paste0(base, user, 'access_token=', mytoken)
base <- 'https://api.github.com/user/'
org_url <- paste0(base, 'access_token=', mytoken)
org_url
mytoken <- '939506c8601b791a576f3754890efcf671d34c63
base <- 'https://api.github.com/user?'
mytoken <- '939506c8601b791a576f3754890efcf671d34c63'
base <- 'https://api.github.com/user?'
org_url <- paste0(base, 'access_token=', mytoken)
user_info <- fromJSON(org_url)
org_url
repo_url
user_info$repos_url
base_repo <- 'https://api.github.com/users/user/repo?'
repo_url <- paste0(base_repo, 'access_token=', mytoken, '&per_page=100&sort=created&direction=desc')
repo_info <- fromJSON(repo_url)
ri_flat <- flatten(repo_info)
repo_info <- fromJSON(repo_url)
repo_info <- fromJSON(repo_url)
repo_url
base_repo <- 'https://api.github.com/user/repo?'
repo_url <- paste0(base_repo, 'access_token=', mytoken, '&per_page=100&sort=created&direction=desc')
repo_info <- fromJSON(repo_url)
repo_url
base_repo <- 'https://api.github.com/user/repos?'
repo_url <- paste0(base_repo, 'access_token=', mytoken, '&per_page=100&sort=created&direction=desc')
repo_info <- fromJSON(repo_url)
num_repos <- nrow(ri_flat)
pop_repo <- filter(ri_flat, forks_count == max(forks_count)) %>%
pop_repo <- filter(ri_flat, forks_count == max(forks_count)) %>%
select(name)
pop_repo <- filter(ri_flat, forks_count == max(forks_count)) %>%
select(name)
user_info <- fromJSON(user_url)
user_url <- paste0(base, 'access_token=', mytoken)
org <- 'INFO-498F'
user_info <- fromJSON(user_url)
user_name <- ri_flat$owner.login
user_name
base_repo <- 'https://api.github.com/user/repos?'
repo_url <- paste0(base_repo, 'access_token=', mytoken, '&per_page=100&sort=created&direction=desc')
repo_info <- fromJSON(repo_url)
ri_flat <- flatten(repo_info)
num_repos <- nrow(ri_flat)
pop_repo <- filter(ri_flat, forks_count == max(forks_count)) %>%
select(name)
pop_repo <- filter(ri_flat, forks_count == max(forks_count)) %>%
select(name)
user_name <- ri_flat$owner.login
user_name
user_name <- unique(ri_flat$owner.login)
useR_name
user_name
user_name <- unique(ri_flat$owner.login)
user_name
user_name <- paste(unique(ri_flat$owner.login))
user_name
user_name <- as.character(unique(ri_flat$owner.login))
pop_repo <- filter(ri_flat, forks_count == max(forks_count)) %>%
select(name)
pop_trpo
pop_trpo
pop_trepo
pop_repo
pop_repo <- filter(ri_flat, forks_count == max(forks_count), id == max(id)) %>%
pop_repo <- filter(ri_flat, forks_count == max(forks_count), id == max(id)) %>%
select(name)
pop_repo <- filter(ri_flat, forks_count == max(forks_count), id == max(id)) %>%
select(name)
pop_repo
user_info$avatar_url
user_info$avatar_url
ava_url
user_info$avatar_url
?format
?format.Date
View(ri_flat)
format.Date(ri_flat$created_at)
pretty_repo <- mutate(ri_flat, created_at == format.Date(ri_flat$created_at)
View(pretty_repo)
pretty_repo <- mutate(ri_flat, created_at == format.Date(ri_flat$created_at))
View(pretty_repo)
pretty_repo <- mutate(ri_flat, created_at = format.Date(ri_flat$created_at))
data.frame(select(pretty_repo, id, name, created_at ))
mini_repo <- data.frame(select(pretty_repo, id, name, created_at ))
?names
names(mini_repo$id) <- 'ID'
View(mini_repo)
names(mini_repo$id) <- 'ID'
names(mini_repo$created_at) <- 'Date Created'
names(mini_repo$name) <- 'Name'
View(mini_repo)
ini_repo$id
mini_repo$id
test <- names(mini_repo$id) <- 'ID'
test
View(test)
mini_repo <- data.frame(select(pretty_repo, id, name, created_at ))
names(mini_repo$id) <- 'ID'
names(mini_repo$created_at)[names(mini_repo$created_at) == created_at] <- 'Date Created'
names(mini_repo$created_at)[names(mini_repo$created_at) == 'created_at'] <- 'Date Created'
names(mini_repo)[names(mini_repo) == 'created_at'] <- 'Date Created'
names(mini_repo)[names(mini_repo == name) <- 'Name'
names(mini_repo)[names(mini_repo == name)] <- 'Name'
names(mini_repo)[names(mini_repo) == name] <- 'Name'
names(mini_repo)[names(mini_repo) == 'name'] <- 'Name'
names(mini_repo)[names(mini_repo) == 'id' <- 'ID'
names(mini_repo)[names(mini_repo) == 'id' <- 'ID'
names(mini_repo)[names(mini_repo) == 'id'] <- 'ID'
?kable
iris
setwd("C:/Users/Sean/info498/Assignments/Assignment8/assignment8-building-applications")
shiny::runApp()
